################################################################################
# Module: exceptions.py
# Description: Exceptions generated by the module.
# License: Apache v2.0
# Author: Pedro Pinto da Silva
# Web: https://github.com/pedroswits/anprx
################################################################################

class AnprxError(Exception):
    """
    Base class for anprx generated exceptions.
    """
    pass


class BBoxAreaSafetyError(AnprxError):
    """
    Raised to prevent very large networks to be retrieved from osmnx, without user acknowledgement of the operation. Retrieving very large networks (e.g. country-sized networks) from osmnx can be a very time-expensive operation. This wrapper is useful in cases where such operation is triggered by mistake.

    Attributes:
        bbox_area -- area of the bounding box used to retrieve the osm street network
        max_area -- maximum allowed bounding box area
    """

    def __init__(self, bbox_area, max_area, unit):
        self.bbox_area = bbox_area
        self.max_area = max_area
        self.unit = unit
        self.message = "This is a safety control, to avoid the retrieval of very large osm networks by mistake. Desired bbox area: {}, safety maximum : {}. Units are {} sq.".format(bbox_area, max_area, unit)


class ZeroNeighborsError(AnprxError):
    """
    Raised when BallTree.query_radius() returns an empty list.

    Attributes:
        r -- distance within which neighbors are returned
        origin -- point whose neighbors are being queried
        unit -- Units used to calculate distances.
    """

    def __init__(self, r, origin, unit):
        self.r = r
        self.origin = origin
        self.unit = unit
        self.message = "No neighbors were found within {} {} of point {}".format(r, unit, origin)


class MaxAttemptsExceededError(AnprxError):
    """
    Raised when exceeding a maximum attempt to do something.

    Attributes:
        max_attempts -- maximum number of attempts
        work -- what 'stuff' tried to be accomplished
    """

    def __init__(self, max_attempts, work):
        self.max_attempts = max_attempts
        self.work = work
        self.message = "Exceeded maximum number of attempts {} when trying to {}.".format(max_attempts, work)
